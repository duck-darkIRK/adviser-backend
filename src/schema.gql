# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Class {
  Id: ID!
  classCode: String!
  createdAt: DateTime!
  isDeleted: Boolean!
  size: Int!
  status: String
  students: [User!]
  subject: Subject!
  teachers: [User!]
  updatedAt: DateTime!
}

type ClassEntity {
  Id: Int!
  classCode: String!
  createdAt: DateTime!
  isDeleted: Boolean!
  size: Int!
  status: String
  students: [UserEntity!]!
  subject: SubjectEntity!
  teachers: [UserEntity!]!
  updatedAt: DateTime!
}

type Comment {
  Id: ID!
  content: String!
  createdAt: DateTime!
  likes: [User!]
  post: Post
  replies: [Comment!]
  reply: Comment
  replyMail: [Mail!]
  updatedAt: DateTime!
  user: User!
}

type CommentEntity {
  Id: Int!
  content: String!
  createdAt: DateTime!
  likes: [UserEntity!]
  post: PostEntity
  replies: [CommentEntity!]
  reply: CommentEntity
  replyMail: [MailEntity!]
  updatedAt: DateTime!
  user: UserEntity!
}

input CreateClassDto {
  classCode: String!
  isDeleted: Boolean
  size: Int
  status: String
  students: [String!]
  subject: String!
  teachers: [String!]
}

input CreateCommentDto {
  content: String!
  post: Float
  reply: Float
  user: String!
}

input CreateMailDto {
  content: String!
  name: String!
  receiver: String!
  replyToCmt: Float
  replyToMail: Float
  replyToPost: Float
  sender: String!
  type: String = "default"
}

input CreateMajorDto {
  Id: String!
  isDeleted: Boolean
  majorName: String!
  subjects: [String!]
}

input CreatePostDto {
  content: String
  image: [String]
  title: String
  user: String!
}

input CreateSubjectDto {
  Id: String!
  isDeleted: Boolean
  majors: [String]
  subjectName: String!
}

input CreateTimetableDto {
  semester: Float!
  sheets: [CreateTimetableSheetDto]
  user: String!
  year: Float!
}

input CreateTimetableSheetDto {
  class: String!
  day: Float!
  time: Float!
}

input CreateTranscriptDto {
  score: Float!
  subject: String!
  user: String!
}

input CreateUserDto {
  avatar: String
  birthdate: DateTime
  code: Float!
  createdAt: DateTime
  email: String
  firstName: String!
  idPrefix: String
  isBaned: Boolean
  lastName: String!
  majors: [String!]
  password: String!
  refresh_token: String
  roles: [String!]!
  updatedAt: DateTime
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mail {
  Id: ID!
  content: String!
  createdAt: DateTime!
  name: String!
  receiver: User!
  replyToCmt: Comment
  replyToMail: Mail
  replyToPost: Post
  sender: User!
  type: String!
  updatedAt: DateTime!
}

type MailEntity {
  Id: Int!
  content: String!
  createdAt: DateTime!
  name: String!
  receiver: UserEntity
  replyToCmt: CommentEntity
  replyToMail: MailEntity
  replyToPost: PostEntity
  sender: UserEntity
  type: String!
  updatedAt: DateTime!
}

type Major {
  Id: ID!
  createdAt: DateTime!
  isDeleted: Boolean!
  majorName: String!
  subjects: [Subject!]!
  updatedAt: DateTime!
  users: [User!]!
}

type MajorEntity {
  Id: String!
  createdAt: DateTime!
  isDeleted: Boolean!
  majorName: String!
  subjects: [SubjectEntity!]!
  updatedAt: DateTime!
  users: [UserEntity!]!
}

type Mutation {
  addCommentToPost(commentId: Float!, postId: Float!): Boolean!
  addReaderPost(postId: Float!, userId: String!): Boolean!
  addStudentsToClass(classId: Float!, usersId: [String!]!): Boolean!
  addSubjectsToMajor(majorId: String!, subjectsId: [String!]!): Boolean!
  addTeachersToClass(classId: Float!, usersId: [String!]!): Boolean!
  addUserLikePost(postId: Float!, userId: String!): Boolean!
  createClass(createClassDto: CreateClassDto!): ClassEntity!
  createComment(createCommentDto: CreateCommentDto!): CommentEntity!
  createMail(createMailDto: CreateMailDto!): MailEntity!
  createMajor(createMajorDto: CreateMajorDto!): MajorEntity!
  createPost(createPostDto: CreatePostDto!): PostEntity!
  createSubject(createSubjectDto: CreateSubjectDto!): SubjectEntity!
  createTimetable(createTimetableDto: CreateTimetableDto!): TimetableEntity!
  createTranscript(createTranscriptDto: CreateTranscriptDto!): TranscriptEntity!
  createUser(createUserDto: CreateUserDto!): SafeUserEntity!
  deleteSubject(id: Float!): Boolean!
  deleteUser(id: String!): SafeUserEntity!
  removeClass(id: Int!): Boolean!
  removeMajor(id: String!): Boolean!
  removeStudentsFromClass(classId: Float!, usersId: [String!]!): Boolean!
  removeSubjectsFromMajor(majorId: String!, subjectsId: [String!]!): Boolean!
  removeTeachersFromClass(classId: Float!, usersId: [String!]!): Boolean!
  removeTimetable(id: Float!): Boolean!
  removeUserLikePost(postId: Float!, userId: String!): Boolean!
  timetableForm: TimetableSheetEntity!
  updateClass(id: Int!, updateClassDto: UpdateClassDto!): ClassEntity!
  updateComment(id: Float!, updateCommentDto: UpdateCommentDto!): CommentEntity!
  updateMail(id: Float!, updateMailDto: UpdateMailDto!): MailEntity!
  updateMajor(id: String!, updateMajorDto: UpdateMajorDto!): MajorEntity!
  updatePost(id: Int!, updatePostDto: UpdatePostDto!): PostEntity!
  updateSubject(id: String!, updateSubjectDto: UpdateSubjectDto!): SubjectEntity!
  updateSubjectInClass(classId: String!, subjectId: String!): Boolean!
  updateTimetable(id: Float!, updateTimetableDto: UpdateTimetableDto!): TimetableEntity!
  updateTranscript(id: Float!, updateTranscriptDto: UpdateTranscriptDto!): TranscriptEntity!
  updateUser(id: String!, updateUserDto: UpdateUserDto!): SafeUserEntity!
}

type Notification {
  Id: ID!
  comment: Comment
  createdAt: DateTime!
  isDeleted: Boolean!
  isPin: Boolean!
  isRead: Boolean!
  mail: Mail
  updatedAt: DateTime!
  user: User!
}

type NotificationEntity {
  Id: Int!
  comment: CommentEntity
  createdAt: DateTime!
  isDeleted: Boolean!
  isPin: Boolean!
  isRead: Boolean!
  mail: MailEntity
  updatedAt: DateTime!
  user: UserEntity!
}

type Post {
  Id: ID!
  comments: [Comment!]!
  content: String
  createdAt: DateTime!
  image: [String]!
  likes: [User!]!
  reader: [User!]!
  reply: [Mail!]!
  title: String
  updatedAt: DateTime!
  user: User!
}

type PostEntity {
  Id: Int!
  comments: [CommentEntity!]!
  content: String
  createdAt: DateTime!
  image: [String!]
  likes: [UserEntity!]!
  reader: [UserEntity!]!
  reply: [MailEntity!]!
  title: String
  updatedAt: DateTime!
  user: UserEntity!
}

type Query {
  getAllClasses(count: Int, index: Int): [ClassEntity!]!
  getAllComments: [CommentEntity!]!
  getAllMails(count: Int, index: Int): [MailEntity!]!
  getAllMajors(count: Float, index: Float): [MajorEntity!]!
  getAllPosts(count: Int, index: Int): [PostEntity!]!
  getAllSubjects(count: Float, index: Float = 0): [SubjectEntity!]!
  getAllTimetables(count: Int, index: Int): [TimetableEntity!]!
  getAllTranscripts(count: Float, index: Float): [TranscriptEntity!]!
  getClassById(id: Int!): ClassEntity!
  getCommentById(id: Float!): CommentEntity!
  getMailById(id: Float!): MailEntity
  getMajorById(id: String!): MajorEntity
  getPostById(id: Int!): PostEntity!
  getSubjectById(id: String!): SubjectEntity!
  getTimetableById(id: Float!): TimetableEntity
  getTranscriptById(id: Float!): TranscriptEntity!
  getUserById(id: String!): SafeUserEntity!
  getUserByUsername(username: String!): SafeUserEntity!
}

type SafeUserEntity {
  Id: String!
  avatar: String
  birthdate: DateTime
  classes: [ClassEntity!]!
  code: Float!
  comments: [CommentEntity!]!
  createdAt: DateTime!
  email: String
  firstName: String!
  idPrefix: String!
  isBaned: Boolean!
  isOnline: Boolean!
  lastName: String!
  likedPosts: [PostEntity!]!
  majors: [MajorEntity!]!
  notifications: [NotificationEntity!]!
  phone: String
  posts: [PostEntity!]!
  readPosts: [PostEntity!]!
  roles: [String!]
  teach: [ClassEntity!]!
  timetables: [TimetableEntity!]!
  transcripts: [TranscriptEntity!]!
  updatedAt: DateTime!
  username: String!
}

type Subject {
  Id: ID!
  classes: [Class!]!
  createdAt: DateTime!
  inTranscript: [Transcript!]
  isDeleted: Boolean!
  majors: [Major!]!
  subjectName: String!
  updatedAt: DateTime!
}

type SubjectEntity {
  Id: String!
  classes: [ClassEntity!]!
  createdAt: DateTime!
  inTranscript: [TranscriptEntity!]!
  isDeleted: Boolean!
  majors: [MajorEntity!]!
  subjectName: String!
  updatedAt: DateTime!
}

type Timetable {
  Id: ID!
  createdAt: DateTime!
  isDeleted: Boolean!
  semester: Float!
  sheets: [TimetableSheet!]!
  updatedAt: DateTime!
  user: User!
  year: Float!
}

type TimetableEntity {
  Id: Float!
  createdAt: DateTime!
  isDeleted: Boolean!
  semester: Int!
  sheets: [TimetableSheetEntity!]!
  updatedAt: DateTime!
  user: UserEntity!
  year: Int!
}

type TimetableSheet {
  Id: ID!
  class: String
  day: Float!
  time: Float!
  timetable: Timetable!
}

type TimetableSheetEntity {
  Id: Float!
  class: String
  day: Int!
  time: Int!
  timetable: TimetableEntity!
}

type Transcript {
  Id: ID!
  createdAt: DateTime!
  score: Float!
  subject: Subject!
  updatedAt: DateTime!
  user: User!
}

type TranscriptEntity {
  Id: Float!
  createdAt: DateTime!
  score: Float!
  subject: [SubjectEntity!]!
  updatedAt: DateTime!
  user: UserEntity!
}

input UpdateClassDto {
  classCode: String
  isDeleted: Boolean
  size: Int
  status: String
}

input UpdateCommentDto {
  content: String
}

input UpdateMailDto {
  type: String
}

input UpdateMajorDto {
  isDeleted: Boolean
  majorName: String
}

input UpdatePostDto {
  content: String
  image: [String]
  title: String
}

input UpdateSubjectDto {
  isDeleted: Boolean
  subjectName: String
}

input UpdateTimetableDto {
  isDeleted: Boolean
  semester: Float
  year: Float
}

input UpdateTranscriptDto {
  score: Float
}

input UpdateUserDto {
  avatar: String
  birthdate: DateTime
  email: String
  firstName: String
  idPrefix: String
  isBaned: Boolean
  lastName: String
  password: String
  refresh_token: String
  roles: [String!]
  username: String
}

type User {
  Id: ID!
  avatar: String
  birthdate: DateTime
  classes: [Class!]
  code: Float!
  comments: [Comment!]
  createdAt: DateTime!
  email: String
  firstName: String!
  idPrefix: String!
  isBaned: Boolean!
  isOnline: Boolean!
  lastName: String!
  likedPosts: [Post!]
  majors: [Major!]
  notifications: [Notification!]
  password: String!
  phone: String
  posts: [Post!]
  readPosts: [Post!]
  refresh_token: String
  roles: [String!]
  teach: [Class!]
  timetables: [Timetable!]
  transcripts: [Transcript!]
  updatedAt: DateTime!
  username: String!
}

type UserEntity {
  Id: String!
  avatar: String
  birthdate: DateTime
  classes: [ClassEntity!]!
  code: Float!
  comments: [CommentEntity!]!
  createdAt: DateTime!
  email: String
  firstName: String!
  idPrefix: String!
  isBaned: Boolean!
  isOnline: Boolean!
  lastName: String!
  likedPosts: [PostEntity!]!
  majors: [MajorEntity!]!
  notifications: [NotificationEntity!]!
  password: String!
  phone: String
  posts: [PostEntity!]!
  readPosts: [PostEntity!]!
  receive: [MailEntity!]!
  refresh_token: String
  roles: [String!]
  send: [MailEntity!]!
  teach: [ClassEntity!]!
  timetables: [TimetableEntity!]!
  transcripts: [TranscriptEntity!]!
  updatedAt: DateTime!
  username: String!
}