# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ClassEntity {
  Id: Int!
  classCode: String!
  createdAt: DateTime!
  isDeleted: Boolean!
  size: Int!
  status: String
  students: [UserEntity!]!
  subject: SubjectEntity!
  teachers: [UserEntity!]!
  updatedAt: DateTime!
}

type CommentEntity {
  Id: Int!
  content: String!
  createdAt: DateTime!
  likes: [UserEntity!]
  post: PostEntity
  replies: [CommentEntity!]
  reply: CommentEntity
  replyMail: [MailEntity!]
  updatedAt: DateTime!
  user: UserEntity!
}

input CreateClassDto {
  classCode: String!
  isDeleted: Boolean
  size: Int
  status: String
  students: [String!]
  subject: String!
  teachers: [String!]
}

input CreateCommentDto {
  content: String!
  post: Float
  reply: Float
  user: String!
}

input CreateGroupDto {
  advisers: [String!]
  classCode: String!
  isDeleted: Boolean
  status: String
  students: [String!]
}

input CreateMailDto {
  content: String!
  name: String!
  receiver: String!
  replyToCmt: Float
  replyToMail: Float
  replyToPost: Float
  sender: String!
  type: String = "default"
}

input CreateMajorDto {
  Id: String!
  isDeleted: Boolean
  majorName: String!
  subjects: [String!]
}

input CreatePostDto {
  content: String
  image: [String]
  title: String
  user: String!
}

input CreateSubjectDto {
  Id: String!
  isDeleted: Boolean
  majors: [String]
  subjectName: String!
}

input CreateTimetableDto {
  semester: Float!
  sheets: [CreateTimetableSheetDto]
  user: String!
  year: Float!
}

input CreateTimetableSheetDto {
  classCode: String!
  day: Float!
  time: Float!
}

input CreateTranscriptDto {
  score: Float!
  subject: String!
  user: String!
}

input CreateUserDto {
  avatar: String
  birthdate: DateTime
  code: Float!
  createdAt: DateTime
  email: String
  firstName: String!
  idPrefix: String
  isBaned: Boolean
  lastName: String!
  majors: [String!]
  password: String!
  refresh_token: String
  roles: [String!]!
  updatedAt: DateTime
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GroupEntity {
  Id: Int!
  advisers: [UserEntity!]!
  classCode: String!
  createdAt: DateTime!
  isDeleted: Boolean!
  status: String
  students: [UserEntity!]!
  updatedAt: DateTime!
}

type MailEntity {
  Id: Int!
  content: String!
  createdAt: DateTime!
  name: String!
  receiver: UserEntity
  replyToCmt: CommentEntity
  replyToMail: MailEntity
  replyToPost: PostEntity
  sender: UserEntity
  type: String!
  updatedAt: DateTime!
}

type MajorEntity {
  Id: String!
  createdAt: DateTime!
  isDeleted: Boolean!
  majorName: String!
  subjects: [SubjectEntity!]!
  updatedAt: DateTime!
  users: [UserEntity!]!
}

type Mutation {
  USER_commentOnComment(commentId: Int!, createCommentDto: CreateCommentDto!): CommentEntity!
  USER_commentOnPost(createCommentDto: CreateCommentDto!, postId: Int!): CommentEntity!
  USER_createPost(createPostDto: CreatePostDto!): PostEntity!
  USER_likePost(postId: Int!): Boolean!
  USER_readNotification: Boolean!
  USER_readPost(postId: Int!): Boolean!
  USER_unlikePost(postId: Int!): Boolean!
  USER_updateComment(commentId: Int!, updateCommentDto: UpdateCommentDto!): CommentEntity!
  USER_updatePost(postId: Int!, updatePostDto: UpdatePostDto!): PostEntity!
  addAdvisersToGroup(groupId: Float!, usersId: [String!]!): Boolean!
  addCommentToPost(commentId: Int!, postId: Int!): Boolean!
  addReaderPost(postId: Int!, userId: String!): Boolean!
  addStudentsToClass(classId: Int!, usersId: [String!]!): Boolean!
  addStudentsToGroup(groupId: Int!, usersId: [String!]!): Boolean!
  addSubjectsToMajor(majorId: String!, subjectsId: [String!]!): Boolean!
  addTeachersToClass(classId: Int!, usersId: [String!]!): Boolean!
  addUserLikePost(postId: Int!, userId: String!): Boolean!
  createClass(createClassDto: CreateClassDto!): ClassEntity!
  createComment(createCommentDto: CreateCommentDto!): CommentEntity!
  createGroup(createGroupDto: CreateGroupDto!): GroupEntity!
  createMail(createMailDto: CreateMailDto!): MailEntity!
  createMajor(createMajorDto: CreateMajorDto!): MajorEntity!
  createPost(createPostDto: CreatePostDto!): PostEntity!
  createSubject(createSubjectDto: CreateSubjectDto!): SubjectEntity!
  createTimetable(createTimetableDto: CreateTimetableDto!): TimetableEntity!
  createTranscript(createTranscriptDto: CreateTranscriptDto!): TranscriptEntity!
  createUser(createUserDto: CreateUserDto!): UserEntity!
  deleteSubject(id: Int!): Boolean!
  deleteUser(id: String!): UserEntity!
  removeAdvisersFromGroup(groupId: Float!, usersId: [String!]!): Boolean!
  removeClass(id: Int!): Boolean!
  removeGroup(id: Int!): Boolean!
  removeMajor(id: String!): Boolean!
  removeStudentsFromClass(classId: Int!, usersId: [String!]!): Boolean!
  removeStudentsFromGroup(groupId: Int!, usersId: [String!]!): Boolean!
  removeSubjectsFromMajor(majorId: String!, subjectsId: [String!]!): Boolean!
  removeTeachersFromClass(classId: Int!, usersId: [String!]!): Boolean!
  removeTimetable(id: Int!): Boolean!
  removeUserLikePost(postId: Int!, userId: String!): Boolean!
  timetableForm: TimetableSheetEntity!
  updateClass(id: Int!, updateClassDto: UpdateClassDto!): ClassEntity!
  updateComment(id: Int!, updateCommentDto: UpdateCommentDto!): CommentEntity!
  updateDetailTimetable(sheets: [CreateTimetableSheetDto!]!, timetableId: Int!): TimetableEntity!
  updateGroup(id: Int!, updateGroupDto: UpdateGroupDto!): GroupEntity!
  updateMail(id: Int!, updateMailDto: UpdateMailDto!): MailEntity!
  updateMajor(id: String!, updateMajorDto: UpdateMajorDto!): MajorEntity!
  updatePost(id: Int!, updatePostDto: UpdatePostDto!): PostEntity!
  updateSubject(id: String!, updateSubjectDto: UpdateSubjectDto!): SubjectEntity!
  updateSubjectInClass(classId: String!, subjectId: String!): Boolean!
  updateTimetable(id: Int!, updateTimetableDto: UpdateTimetableDto!): TimetableEntity!
  updateTranscript(id: Int!, updateTranscriptDto: UpdateTranscriptDto!): TranscriptEntity!
  updateUser(id: String!, updateUserDto: UpdateUserDto!): UserEntity!
}

type NotificationEntity {
  Id: Int!
  comment: CommentEntity
  createdAt: DateTime!
  isDeleted: Boolean!
  isPin: Boolean!
  isRead: Boolean!
  mail: MailEntity
  updatedAt: DateTime!
  user: UserEntity!
}

type PostEntity {
  Id: Int!
  comments: [CommentEntity!]!
  content: String
  createdAt: DateTime!
  image: [String!]
  likes: [UserEntity!]!
  reader: [UserEntity!]!
  reply: [MailEntity!]!
  title: String
  updatedAt: DateTime!
  user: UserEntity!
}

type Query {
  USER_getAllAdviseGroups(count: Int, index: Int): [GroupEntity!]!
  USER_getAllClasses(count: Int, index: Int): [ClassEntity!]!
  USER_getAllGroups(count: Int, index: Int): [GroupEntity!]!
  USER_getAllReceiveMail(count: Int, index: Int): [MailEntity!]!
  USER_getAllSendMail(count: Int, index: Int): [MailEntity!]!
  USER_getAllTeachesClass(count: Int, index: Int): [ClassEntity!]!
  USER_getNotifications: [NotificationEntity!]!
  USER_getOwnData: UserEntity
  USER_getStudentTranscripts(userId: String!): [TranscriptEntity!]!
  USER_getTimetables(count: Int, index: Int): [TimetableEntity!]!
  USER_getTranscripts: [TranscriptEntity!]!
  USER_sendMail(createMailDto: CreateMailDto!): MailEntity!
  getAllClasses(count: Int, index: Int): [ClassEntity!]!
  getAllComments: [CommentEntity!]!
  getAllGroups(count: Int, index: Int): [GroupEntity!]!
  getAllMails(count: Int, index: Int): [MailEntity!]!
  getAllMajors(count: Int, index: Int): [MajorEntity!]!
  getAllPosts(count: Int, index: Int): [PostEntity!]!
  getAllSubjects(count: Int, index: Int = 0): [SubjectEntity!]!
  getAllTimetables(count: Int, index: Int): [TimetableEntity!]!
  getAllTranscripts(count: Int, index: Int): [TranscriptEntity!]!
  getAllUsers(by: SearchUserDto, count: Int, index: Int): [UserEntity!]!
  getClassByCode(code: String!): ClassEntity!
  getClassById(id: Int!): ClassEntity!
  getCommentById(id: Int!): CommentEntity!
  getGroupById(id: Int!): GroupEntity!
  getMailById(id: Int!): MailEntity
  getMajorById(id: String!): MajorEntity
  getPostById(id: Int!): PostEntity!
  getSubjectById(id: String!): SubjectEntity!
  getTimetableById(id: Int!): TimetableEntity
  getTranscriptById(id: Int!): TranscriptEntity!
  getUserByCode(code: Int!): UserEntity!
  getUserById(id: String!): UserEntity!
  getUserByUsername(username: String!): UserEntity!
  searchUserByUsername(username: String!): [UserEntity!]!
}

input SearchUserDto {
  email: String
  firstName: String
  isBaned: Boolean
  isOnline: Boolean
  lastName: String
  relations: [String!]
  roles: [String!]
}

type SubjectEntity {
  Id: String!
  classes: [ClassEntity!]!
  createdAt: DateTime!
  inTranscript: [TranscriptEntity!]!
  isDeleted: Boolean!
  majors: [MajorEntity!]!
  subjectName: String!
  updatedAt: DateTime!
}

type TimetableEntity {
  Id: Float!
  createdAt: DateTime!
  isDeleted: Boolean!
  semester: Int!
  sheets: [TimetableSheetEntity!]!
  updatedAt: DateTime!
  user: UserEntity!
  year: Int!
}

type TimetableSheetEntity {
  Id: Float!
  class: String
  day: Int!
  time: Int!
  timetable: TimetableEntity!
}

type TranscriptEntity {
  Id: Float!
  createdAt: DateTime!
  score: Float!
  subject: [SubjectEntity!]!
  updatedAt: DateTime!
  user: UserEntity!
}

input UpdateClassDto {
  classCode: String
  isDeleted: Boolean
  size: Int
  status: String
}

input UpdateCommentDto {
  content: String
}

input UpdateGroupDto {
  classCode: String
  isDeleted: Boolean
  status: String
}

input UpdateMailDto {
  type: String
}

input UpdateMajorDto {
  isDeleted: Boolean
  majorName: String
}

input UpdatePostDto {
  content: String
  image: [String]
  title: String
}

input UpdateSubjectDto {
  isDeleted: Boolean
  subjectName: String
}

input UpdateTimetableDto {
  isDeleted: Boolean
  semester: Float
  year: Float
}

input UpdateTranscriptDto {
  score: Float
}

input UpdateUserDto {
  avatar: String
  birthdate: DateTime
  email: String
  firstName: String
  idPrefix: String
  isBaned: Boolean
  lastName: String
  password: String
  refresh_token: String
  roles: [String!]
  username: String
}

type UserEntity {
  Id: String!
  adviserOf: [GroupEntity!]
  avatar: String
  birthdate: DateTime
  classes: [ClassEntity!]
  code: Float!
  comments: [CommentEntity!]
  createdAt: DateTime!
  email: String
  firstName: String!
  groups: GroupEntity
  idPrefix: String!
  isBaned: Boolean!
  isOnline: Boolean!
  lastName: String!
  likedPosts: [PostEntity!]
  majors: [MajorEntity!]
  notifications: [NotificationEntity!]
  phone: String
  posts: [PostEntity!]
  readPosts: [PostEntity!]
  receive: [MailEntity!]
  roles: [String!]
  send: [MailEntity!]
  teach: [ClassEntity!]
  timetables: [TimetableEntity!]
  transcripts: [TranscriptEntity!]
  updatedAt: DateTime!
  username: String!
}